# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master_pipeline

strategy:
  matrix:
    windows_vs2017:
      imageName: "vs2017-win2016"
    windows_vs2019:
      imageName: "windows-2019"
  maxParallel: 2

pool:
  vmImage: $(imageName)

steps:
- script: |
    set WORKSPACE=%CD%
    set EDK_TOOLS_PATH=%WORKSPACE%\BaseTools
    git submodule update --init
    python --version
    powershell "& {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri "https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/win64/nasm-2.13.03-win64.zip -OutFile nasm-2.13.03-win64.zip"}"
    powershell Expand-Archive nasm-2.13.03-win64.zip .
    set NASM_PREFIX=%WORKSPACE%\nasm-2.13.03\
    %NASM_PREFIX%nasm --version
    powershell "& {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri "https://acpica.org/sites/acpica/files/iasl-win-20190509.zip -OutFile iasl-win-20190509.zip"}"
    powershell Expand-Archive iasl-win-20190509.zip
    set IASL_PREFIX=%WORKSPACE%\iasl-win-20190509\
    %IASL_PREFIX%iasl --version
    path=%path%;%WORKSPACE%\openssl-1.0.2r-x64_86-win64
    call edkSetup.bat Rebuild
    call build -a IA32 -a X64 -n 0 -t VS2015x86 -p OvmfPkg/OvmfPkgIa32X64.dsc -D DEBUG_ON_SERIAL_PORT
    call build -a IA32 -a X64 -n 0 -t VS2017    -p OvmfPkg/OvmfPkgIa32X64.dsc -D DEBUG_ON_SERIAL_PORT
