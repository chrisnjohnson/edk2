## @file
# Manual GitHubAction to perform Open Coverity builds
#
# Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
#
# Basd on: https://github.com/vapier/coverity-scan-action
#
# Modified to support combinng scan results from many EDK II
# builds before uploading to coverity.
#
##

name: Open Coverity edk2 repository builds

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      COVERITY_SCAN_TOKEN:
        description: 'Coverity Scan Token for the project being scanned'
        default: ''
        required: true
      COVERITY_SCAN_PROJECT_NAME:
        description: 'Name of the Coverity Scan Project'
        default: 'mdkinney%2Fedk2'
        required: true
      COVERITY_SCAN_EMAIL:
        description: 'Email associated with the Coverity Scan Project'
        default: 'michael.d.kinney@intel.com'
        required: true
      coverityoptions:
        description: 'Extra options to add to cov-build command to customize checkers'
        default: ''
        required: false
      repo:
        description: 'Public edk2 repository to use for Open Coverity build'
        default: 'mdkinney/edk2'
        required: true
      ref:
        description: 'git branch/tag/sha to run Open Coverity build'
        default: 'master'
        required: true
      buildoptions:
        description: 'Extra options to add to end of build command (e.g. --quiet, --verbose)'
        default: '-n 4 --quiet'
        required: false
      upload:
        description: 'True to submit results to Coverity Scan'
        default: false
        required: true
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  gcc_coverity_build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      GCC5_AARCH64_PREFIX: "/usr/bin/aarch64-linux-gnu-"
      GCC5_ARM_PREFIX: "/usr/bin/arm-none-eabi-"
      GCC5_RISCV64_PREFIX: "/usr/bin/riscv64-linux-gnu-"
    defaults:
      run:
        working-directory: ./edk2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
      with:
        repository: mdkinney/edk2
        ref: sandbox/CompareBuild
        path: compare
        submodules: false
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref }}
        path: edk2
        submodules: true
    - name: Install pip modules
      run: |
        python -m pip install --upgrade pip
        pip install GitPython
    - name: Install NASM
      run: |
        curl -k -O  -L http://ftp.us.debian.org/debian//pool/main/n/nasm/nasm_2.15.05-1_amd64.deb
        sudo apt install ./nasm_2.15.05-1_amd64.deb
        nasm --version
    - name: Install IASL/ARM/AARCH64/RISCV64 compilers
      run: |
        sudo apt-get update
        sudo apt-get install iasl gcc-arm-none-eabi gcc-aarch64-linux-gnu gcc-riscv64-linux-gnu pax-utils libc6-dev-i386

    - name: Download Coverity Build Tool and add to PATH
      run: |
        wget -nv \
          --post-data "token=${{ github.event.inputs.COVERITY_SCAN_TOKEN }}&project=${{ github.event.inputs.COVERITY_SCAN_PROJECT_NAME }}" \
          -O cov-analysis.tar.gz \
          https://scan.coverity.com/download/cxx/linux64
        mkdir cov-analysis
        tar -xzf cov-analysis.tar.gz --strip 1 -C cov-analysis
        echo "${PWD}/cov-analysis/bin" >> $GITHUB_PATH
    - name: Configure Coverity Build Tool
      run: |
        cov-configure --compiler aarch64-linux-gnu-gcc --comptype gcc --template
        cov-configure --compiler arm-none-eabi-gcc     --comptype gcc --template
        cov-configure --compiler riscv64-linux-gnu-gcc --comptype gcc --template
    - name: Build BaseTools
      run: |
        . edksetup.sh
        make -C BaseTools
    - name: Build with cov-build OvmfXen
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a X64                                      -p OvmfPkg/OvmfXen.dsc
    - name: Build with cov-build UefiCpuPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64                              -p UefiCpuPkg/UefiCpuPkg.dsc
    - name: Build with cov-build PcAtChipsetPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64                              -p PcAtChipsetPkg/PcAtChipsetPkg.dsc
    - name: Build with cov-build MdePkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p MdePkg/MdePkg.dsc
    - name: Build with cov-build MdeModukePkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64        -a AARCH64 -a RISCV64 -p MdeModulePkg/MdeModulePkg.dsc
    - name: Build with cov-build ShellPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p ShellPkg/ShellPkg.dsc
    - name: Build with cov-build FatPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p FatPkg/FatPkg.dsc
    - name: Build with cov-build ArmPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM -a AARCH64                           -p ArmPkg/ArmPkg.dsc
    - name: Build with cov-build ArmPlatformPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM -a AARCH64                           -p ArmPlatformPkg/ArmPlatformPkg.dsc
    - name: Build with cov-build AARCH64 ArmVirtCloudHv
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a AARCH64                                  -p ArmVirtPkg/ArmVirtCloudHv.dsc
    - name: Build with cov-build ARM ArmVirtCloudHv
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM                                      -p ArmVirtPkg/ArmVirtCloudHv.dsc
    - name: Build with cov-build AARCH64 ArmVirtQemu
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a AARCH64                                  -p ArmVirtPkg/ArmVirtQemu.dsc
    - name: Build with cov-build ARM ArmVirtQemu
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM                                      -p ArmVirtPkg/ArmVirtQemu.dsc
    - name: Build with cov-build AARCH64 ArmVirtQemuKernel
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a AARCH64                                  -p ArmVirtPkg/ArmVirtQemuKernel.dsc
    - name: Build with cov-build ARM ArmVirtQemuKernel
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM                                      -p ArmVirtPkg/ArmVirtQemuKernel.dsc
    - name: Build with cov-build AARCH64 ArmVirtXen
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a AARCH64                                  -p ArmVirtPkg/ArmVirtXen.dsc
    - name: Build with cov-build ARM ArmVirtXen
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM                                      -p ArmVirtPkg/ArmVirtXen.dsc
    - name: Build with cov-build CryptoPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p CryptoPkg/CryptoPkg.dsc
    - name: Build with cov-build DynamicTablesPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a ARM -a AARCH64                           -p DynamicTablesPkg/DynamicTablesPkg.dsc
    - name: Build with cov-build EmbeddedPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64            -p EmbeddedPkg/EmbeddedPkg.dsc
    - name: Build with cov-build FmpDevicePkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p FmpDevicePkg/FmpDevicePkg.dsc
    - name: Build with cov-build IntelFsp2Pkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32                                     -p IntelFsp2Pkg/IntelFsp2Pkg.dsc
    - name: Build with cov-build IntelFsp2WrapperPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64                              -p IntelFsp2WrapperPkg/IntelFsp2WrapperPkg.dsc
    - name: Build with cov-build NetworkPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p NetworkPkg/NetworkPkg.dsc
    - name: Build with cov-build IA32 OvmfPkgIa32
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32                                     -p OvmfPkg/OvmfPkgIa32.dsc
    - name: Build with cov-build IA32 X64 OvmfPkgIa32X64
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64                              -p OvmfPkg/OvmfPkgIa32X64.dsc
    - name: Build with cov-build X64 OvmfPkgX64
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a X64                                      -p OvmfPkg/OvmfPkgX64.dsc
    - name: Build with cov-build BhyveX64
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a X64                                      -p OvmfPkg/Bhyve/BhyveX64.dsc
    - name: Build with cov-build MicrovmX64
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a X64                                      -p OvmfPkg/Microvm/MicrovmX64.dsc
    - name: Build with cov-build RedfishPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p RedfishPkg/RedfishPkg.dsc
    - name: Build with cov-build SecurityPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p SecurityPkg/SecurityPkg.dsc
    - name: Build with cov-build SignedCapsulePkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a AARCH64 -a ARM            -p SignedCapsulePkg/SignedCapsulePkg.dsc
    - name: Build with cov-build SourceLevelDebugPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64                              -p SourceLevelDebugPkg/SourceLevelDebugPkg.dsc
    - name: Build with cov-build UefiPayloadPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64                              -p UefiPayloadPkg/UefiPayloadPkg.dsc
    - name: Build with cov-build UnitTestFrameworkPkg
      continue-on-error: true
      run: |
        . edksetup.sh
        cov-build --dir cov-int --append-log ${{ github.event.inputs.coverityoptions }} build -t GCC5 ${{ github.event.inputs.buildoptions }} -b NOOPT -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV   -p UnitTestFrameworkPkg/UnitTestFrameworkPkg.dsc
    - name: Submit results to Coverity Scan
      if: ${{ github.event.inputs.upload }}
      run: |
        tar -czvf cov-int.tgz cov-int
        curl \
          --form project="${{ github.event.inputs.COVERITY_SCAN_PROJECT_NAME }}" \
          --form token="${{ github.event.inputs.COVERITY_SCAN_TOKEN }}" \
          --form email="${{ github.event.inputs.COVERITY_SCAN_EMAIL }}" \
          --form file=@cov-int.tgz \
          --form version="${{ github.sha }}" \
          --form description="coverity-scan-action ${{ github.repository }} / ${{ github.ref }}" \
          "https://scan.coverity.com/builds?project=${{ github.event.inputs.COVERITY_SCAN_PROJECT_NAME }}"
