## @file
# Manual GitHubAction to perform build comparison
#
# Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      repo:
        description: 'Public edk2 repository to use for comparison'
        default: 'mdkinney/edk2'
        required: true
      ref1:
        description: 'First git reference for comparison'
        default: ''
        required: true
      ref2:
        description: 'Second git reference for comparison'
        default: ''
        required: true
      buildoptions:
        description: 'Extra options to add to end of build command (e.g. --quiet, --verbose)'
        default: '-n 4 --quiet'
        required: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  vs_build:
    strategy:
      matrix:
        platform: [
          -a IA32 -a X64 -p CryptoPkg/CryptoPkg.dsc,
          -a IA32 -a X64 -p CryptoPkg/Test/CryptoPkgHostUnitTest.dsc,
          #
          # Skip because too many issues to fix right now
          #
          # -a IA32 -a X64 -p EmbeddedPkg/EmbeddedPkg.dsc,
          #
          -a IA32        -p EmulatorPkg/EmulatorPkg.dsc,
          -a X64         -p EmulatorPkg/EmulatorPkg.dsc,
          -a IA32 -a X64 -p FatPkg/FatPkg.dsc,
          -a IA32 -a X64 -p FmpDevicePkg/FmpDevicePkg.dsc,
          -a IA32 -a X64 -p FmpDevicePkg/Test/FmpDeviceHostPkgTest.dsc,
          -a IA32        -p IntelFsp2Pkg/IntelFsp2Pkg.dsc,
          -a IA32 -a X64 -p IntelFsp2WrapperPkg/IntelFsp2WrapperPkg.dsc,
          -a IA32 -a X64 -p MdeModulePkg/MdeModulePkg.dsc,
          -a IA32 -a X64 -p MdePkg/MdePkg.dsc,
          -a IA32 -a X64 -p MdePkg/Test/MdePkgHostTest.dsc,
          -a IA32 -a X64 -p NetworkPkg/NetworkPkg.dsc,
          #
          # Skip because it uses cmocka that uses __LINE__ that can not be overriden
          #
          # -a X64 -p MdeModulePkg/Test/MdeModulePkgHostTest.dsc,
          #
          -a IA32 -a X64 -p PcAtChipsetPkg/PcAtChipsetPkg.dsc,
          -a IA32 -a X64 -p RedfishPkg/RedfishPkg.dsc,
          -a IA32 -a X64 -p SecurityPkg/SecurityPkg.dsc,
          -a IA32 -a X64 -p ShellPkg/ShellPkg.dsc,
          -a IA32 -a X64 -p SignedCapsulePkg/SignedCapsulePkg.dsc,
          -a IA32 -a X64 -p SourceLevelDebugPkg/SourceLevelDebugPkg.dsc,
          -a IA32 -a X64 -p UefiCpuPkg/Test/UefiCpuPkgHostTest.dsc,
          -a IA32 -a X64 -p UefiCpuPkg/UefiCpuPkg.dsc,
          -a IA32 -a X64 -p UefiPayloadPkg/UefiPayloadPkg.dsc,
          -a IA32 -a X64 -p UnitTestFrameworkPkg/UnitTestFrameworkPkg.dsc,
          -a IA32 -a X64 -p UnitTestFrameworkPkg/Test/UnitTestFrameworkPkgHostTest.dsc,
          #
          # Skip because of Linux shell dependencies
          #
          # -a X64 -p OvmfPkg/AmdSev/AmdSevX64.dsc,
          #
          -a IA32        -p OvmfPkg/OvmfPkgIa32.dsc,
          -a IA32 -a X64 -p OvmfPkg/OvmfPkgIa32X64.dsc,
          -a X64         -p OvmfPkg/OvmfPkgX64.dsc,
          -a X64 -p OvmfPkg/OvmfXen.dsc,
          -a X64 -p OvmfPkg/Bhyve/BhyveX64.dsc,
          -a X64 -p OvmfPkg/Microvm/MicrovmX64.dsc
          ]
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      NASM_PREFIX: c:\Program Files\NASM\
      IASL_PREFIX: c:\tools\ASL\
    defaults:
      run:
        shell: cmd
        working-directory: .\edk2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
      with:
        repository: mdkinney/edk2
        ref: sandbox/CompareBuild
        path: compare
        submodules: false
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref2 }}
        path: edk2
        submodules: false
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref1 }}
        path: edk2
        submodules: true
    - name: Install pip modules
      run: |
        python -m pip install --upgrade pip
        pip install GitPython
    - name: Install NASM
      run: |
        choco install nasm
        choco install iasl --version=2017.11.10
    - name: Build BaseTools
      run: |
        call edksetup.bat Rebuild
    - name: ${{ matrix.platform }}
      run: |
        call edksetup.bat
        python ..\compare\CompareBuild.py --ref1 ${{ github.event.inputs.ref1 }} --ref2 ${{ github.event.inputs.ref2 }} build -t VS2019 -j Build/Build.log ${{ github.event.inputs.buildoptions }} -b NOOPT ${{matrix.platorm}}

  gcc_build:
    strategy:
      matrix:
        platform: [
          -a ARM -a AARCH64                           -p ArmPkg/ArmPkg.dsc, 
          -a ARM -a AARCH64                           -p ArmPlatformPkg/ArmPlatformPkg.dsc, 
          -a AARCH64                                  -p ArmVirtPkg/ArmVirtCloudHv.dsc, 
          -a ARM                                      -p ArmVirtPkg/ArmVirtCloudHv.dsc,
          -a AARCH64                                  -p ArmVirtPkg/ArmVirtQemu.dsc,
          -a ARM                                      -p ArmVirtPkg/ArmVirtQemu.dsc,
          -a AARCH64                                  -p ArmVirtPkg/ArmVirtQemuKernel.dsc,
          -a ARM                                      -p ArmVirtPkg/ArmVirtQemuKernel.dsc,
          -a AARCH64                                  -p ArmVirtPkg/ArmVirtXen.dsc,
          -a ARM                                      -p ArmVirtPkg/ArmVirtXen.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p CryptoPkg/CryptoPkg.dsc,
          -a IA32 -a X64                              -p CryptoPkg/Test/CryptoPkgHostUnitTest.dsc,
          -a ARM -a AARCH64                           -p DynamicTablesPkg/DynamicTablesPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64            -p EmbeddedPkg/EmbeddedPkg.dsc,
          #
          # Skip because X11 not supported on Ubuntu-20.04
          #
          #  -a X64  -p EmulatorPkg/EmulatorPkg.dsc,
          #  -a IA32 -p EmulatorPkg/EmulatorPkg.dsc, 
          #
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p FatPkg/FatPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p FmpDevicePkg/FmpDevicePkg.dsc,
          -a IA32 -a X64                              -p FmpDevicePkg/Test/FmpDeviceHostPkgTest.dsc,
          -a IA32                                     -p IntelFsp2Pkg/IntelFsp2Pkg.dsc,
          -a IA32 -a X64                              -p IntelFsp2WrapperPkg/IntelFsp2WrapperPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p MdePkg/MdePkg.dsc,
          -a IA32 -a X64                              -p MdePkg/Test/MdePkgHostTest.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p NetworkPkg/NetworkPkg.dsc,
          -a IA32 -a X64 -a AARCH64 -a RISCV64        -p MdeModulePkg/MdeModulePkg.dsc,
          #
          # Skip because HII resource section link failure on Linux GCC ARM NOOPT if HII obj is not last in list of linked libs.
          #
          # -a ARM -p MdeModulePkg/MdeModulePkg.dsc,
          #
          #
          # Skip because it uses cmocka that uses __LINE__ that can not be overriden
          #
          # -a X64 -p MdeModulePkg/Test/MdeModulePkgHostTest.dsc,
          #
          #
          # Skip because "Can't find grub mkimage"
          #
          # -a X64         -p OvmfPkg/AmdSev/AmdSevX64.dsc,
          #
          -a IA32                                     -p OvmfPkg/OvmfPkgIa32.dsc,
          -a IA32 -a X64                              -p OvmfPkg/OvmfPkgIa32X64.dsc,
          -a X64                                      -p OvmfPkg/OvmfPkgX64.dsc,
          -a X64                                      -p OvmfPkg/OvmfXen.dsc,
          -a X64                                      -p OvmfPkg/Bhyve/BhyveX64.dsc,
          -a X64                                      -p OvmfPkg/Microvm/MicrovmX64.dsc,
          -a IA32 -a X64                              -p PcAtChipsetPkg/PcAtChipsetPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p RedfishPkg/RedfishPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p SecurityPkg/SecurityPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV64 -p ShellPkg/ShellPkg.dsc,
          -a IA32 -a X64 -a AARCH64 -a ARM            -p SignedCapsulePkg/SignedCapsulePkg.dsc ,
          -a IA32 -a X64                              -p SourceLevelDebugPkg/SourceLevelDebugPkg.dsc,
          -a IA32 -a X64                              -p UefiCpuPkg/UefiCpuPkg.dsc,
          -a IA32 -a X64                              -p UefiCpuPkg/Test/UefiCpuPkgHostTest.dsc,
          -a IA32 -a X64                              -p UefiPayloadPkg/UefiPayloadPkg.dsc,
          -a IA32 -a X64 -a ARM -a AARCH64 -a RISCV   -p UnitTestFrameworkPkg/UnitTestFrameworkPkg.dsc,
          -a IA32 -a X64                              -p UnitTestFrameworkPkg/Test/UnitTestFrameworkPkgHostTest.dsc
          ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      GCC5_AARCH64_PREFIX: "/usr/bin/aarch64-linux-gnu-"
      GCC5_ARM_PREFIX: "/usr/bin/arm-none-eabi-"
      GCC5_RISCV64_PREFIX: "/usr/bin/riscv64-linux-gnu-"
    defaults:
      run:
        working-directory: ./edk2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
      with:
        repository: mdkinney/edk2
        ref: sandbox/CompareBuild
        path: compare
        submodules: false
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref2 }}
        path: edk2
        submodules: false
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.repo }}
        ref: ${{ github.event.inputs.ref1 }}
        path: edk2
        submodules: true
    - name: Install pip modules
      run: |
        python -m pip install --upgrade pip
        pip install GitPython
    - name: Install NASM
      run: |
        curl -k -O  -L http://ftp.us.debian.org/debian//pool/main/n/nasm/nasm_2.15.05-1_amd64.deb
        sudo apt install ./nasm_2.15.05-1_amd64.deb
        nasm --version
    - name: Install IASL/ARM/AARCH64/RISCV64 compilers
      run: |
        sudo apt-get update
        sudo apt-get install iasl gcc-arm-none-eabi gcc-aarch64-linux-gnu gcc-riscv64-linux-gnu pax-utils libc6-dev-i386
    - name: Build BaseTools
      run: |
        . edksetup.sh
        make -C BaseTools
    - name: ${{matrix.platform}}
      run: |
        . edksetup.sh
        python3 ../compare/CompareBuild.py --ref1 ${{ github.event.inputs.ref1 }} --ref2 ${{ github.event.inputs.ref2 }} build -t GCC5 -j Build/Build.log ${{ github.event.inputs.buildoptions }} ${{matrix.platform}}
